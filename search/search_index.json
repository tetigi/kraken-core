{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the kraken-core documentation! The Kraken build system. Kraken focuses on ease of use and simplicity to model complex task orchestration workflows. Reproducible build environments We recommend that you use krakenw to invoke Kraken builds instead of the kraken cli directly to ensure that you have an isolated and reproducible build environment. Install the kraken wrapper cli via the kraken-wrapper package and define your build requirements at the top of your .kraken.py build script: # ::requirements kraken-std>=0.3.0 from kraken.std.cargo import cargo_build cargo_build() Vendored packages We're vendoring a number of third party packages for the purpose of reducing the burden of package resolution at installation time. This is particularly relevant for using Kraken in continuous integration systems to improve resolve times and PEX size. networkx nr.io.graphviz nr.python.environment termcolor types-termcolor typeapi","title":"Home"},{"location":"#welcome-to-the-kraken-core-documentation","text":"The Kraken build system. Kraken focuses on ease of use and simplicity to model complex task orchestration workflows. Reproducible build environments We recommend that you use krakenw to invoke Kraken builds instead of the kraken cli directly to ensure that you have an isolated and reproducible build environment. Install the kraken wrapper cli via the kraken-wrapper package and define your build requirements at the top of your .kraken.py build script: # ::requirements kraken-std>=0.3.0 from kraken.std.cargo import cargo_build cargo_build() Vendored packages We're vendoring a number of third party packages for the purpose of reducing the burden of package resolution at installation time. This is particularly relevant for using Kraken in continuous integration systems to improve resolve times and PEX size. networkx nr.io.graphviz nr.python.environment termcolor types-termcolor typeapi","title":"Welcome to the kraken-core documentation!"},{"location":"changelog/","text":"Changelog 0.9.2 (2022-08-22) Type Description PR Issues Author Fix fix argument types for `render_file()` (now accepting suppliers instead of properties) @NiklasRosenstein 0.9.1 (2022-08-17) Type Description PR Issues Author Fix pin networkx down to 2.6.x which is the last version with Py 3.7 compatibility @NiklasRosenstein Feature add `RequirementSpec.replace()` @NiklasRosenstein 0.9.0 (2022-08-17) Type Description PR Issues Author Fix fix error when running `krakenw q` because we do not configure the `q` command with these options (close #5) @NiklasRosenstein Breaking change remove vendored libraries again, consolidate packages under `kraken.core` @NiklasRosenstein 0.8.11 (2022-08-13) Type Description PR Issues Author Fix Fix resuming from a build state when it contains objects from a module in the `# :: pythonpath` specified in the build script, and fix resuming from multiple build states. @NiklasRosenstein 0.8.10 (2022-08-12) Type Description PR Issues Author Breaking change remove unused `kraken.core.__main__` @NiklasRosenstein Fix fix `NameError` in `kraken query describe` @NiklasRosenstein 0.8.9 (2022-08-12) Type Description PR Issues Author Improvement include message in successful CheckFileContentsTask execution @NiklasRosenstein 0.8.8 (2022-08-12) Type Description PR Issues Author Fix fix missing import of VizOptions for `kraken q viz` command, fix CheckFileContentsTask @NiklasRosenstein 0.8.7 (2022-08-12) Type Description PR Issues Author Improvement update RenderFileTask and add CheckFileContentsTsak @NiklasRosenstein 0.8.6 (2022-08-12) Type Description PR Issues Author Feature add `kraken.util.krakenw` module @NiklasRosenstein 0.8.5 (2022-08-12) Type Description PR Issues Author Fix another fix for `kraken.test` ~.~ @NiklasRosenstein 0.8.4 (2022-08-12) Type Description PR Issues Author Fix fix kraken_project() again @NiklasRosenstein 0.8.3 (2022-08-12) Type Description PR Issues Author Fix fix `kraken.test` @NiklasRosenstein 0.8.2 (2022-08-12) Type Description PR Issues Author Fix No longer vendor `dill` package, if we try to use the vendored version we get weird pickle issues @NiklasRosenstein 0.8.0 (2022-08-12) Type Description PR Issues Author Breaking change large refactor of the `kraken-core` module, now comes with the cli and utils and a task library, remove `kraken.api` and vendor most dependencies @NiklasRosenstein 0.7.5 (2022-08-06) Type Description PR Issues Author Improvement Fix a potential error when a bad value is passed to `Property.default()` on construction of the object where it cannot be properly formatted as a string yet because some attributes may not be set; `Property.__repr__()` now catches an exception of formatting it's owner @NiklasRosenstein Fix In the previous version, the default groups `lint` and `test` should have been marked as default tasks. They are now @NiklasRosenstein Improvement `TaskGraph.set_targets()` now longer treats group tasks special; this allows `TaskGroup.tasks(targets_only=True)` to return the group tasks that were originally passed into `set_targets()` @NiklasRosenstein 0.7.4 (2022-08-06) Type Description PR Issues Author Improvement Add `Project.group(default)` parameter and mark the groups `lint` and `test` as default. @NiklasRosenstein Breaking change `Task.default` is now disabled by default @NiklasRosenstein Feature Add `Task.get_description()` @NiklasRosenstein 0.7.3 (2022-08-05) Type Description PR Issues Author Feature add `TaskGraph.tasks(pending)` parameter @NiklasRosenstein Fix `TaskGraph.set_status()` now correctly resets the required background tasks of all _pending_ tasks, not just the immediate build targets @NiklasRosenstein 0.7.2 (2022-08-05) Type Description PR Issues Author Deprecation Deprecate `Task.capture` and `Project.do(capture)` with warnings @NiklasRosenstein Fix The task graph now keeps track of tasks that return `TaskStatusType.STARTED` and will reset their status when the graph targets are set (`TaskGraph.set_target()`) which is usually after the TaskGraph was deserialized. This will ensure that background tasks are run again if another task that has not yet run is executed in a resumed execution. @NiklasRosenstein 0.7.1 (2022-08-04) Type Description PR Issues Author Fix Fix default executor to now print build summary in execution order 4 @NiklasRosenstein 0.7.0 (2022-08-03) Type Description PR Issues Author Feature add `TaskStatusType.INTERRUPTED`, the default executor now stops execution immediately (but it would not understand waiting for any currently running tasks if the TaskRunner is executing them in the background) @NiklasRosenstein 0.6.2 (2022-08-01) Type Description PR Issues Author Improvement Depending on a group now behaves like directly dependending on the groups members; this change is particularly relevant for the successors that background tasks are active for. @NiklasRosenstein 0.6.1 (2022-08-01) Type Description PR Issues Author Feature add `Property.setmap()` @NiklasRosenstein 0.6.0 (2022-07-29) Type Description PR Issues Author Feature Define new interfaces for `Graph`, `GraphExecutor` and `GraphExecutorObserver` and provide default implementations that do not use termcolor, so we can get rid of that dependency in `kraken-core` 3 @NiklasRosenstein 0.5.4 (2022-07-27) Type Description PR Issues Author Fix make `Supplier.map()` result picklable @NiklasRosenstein 0.5.3 (2022-07-27) Type Description PR Issues Author Improvement Move `.find_metadata()` and `.current()` implementation on `Context` and `Project` into common base classes (`MetadataContainer` and `CurrentProvider`), add `Project.default()` and `Project.default_factory()`, add `Property.setcallable()` and `Property.clear()` @NiklasRosenstein Feature Add `Task.teardown()` method and adapt `Executor` to call it @NiklasRosenstein Feature `VoidTask` can now be configured to not skip execution @NiklasRosenstein Feature Add `TaskStatusType.STARTED` @NiklasRosenstein Feature add `BackgroundTask` base class @NiklasRosenstein 0.5.2 (2022-07-24) Type Description PR Issues Author Fix Fix derivation of inactive tasks in `TaskGraph` @NiklasRosenstein 0.5.1 (2022-07-24) Type Description PR Issues Author Fix Python 3.7 and 3.8 compatibility (removed use of | operator for types) @NiklasRosenstein 0.5.0 (2022-07-24) Type Description PR Issues Author Improvement make sure anonymous `Supplier` subclasses are picklable @NiklasRosenstein Breaking change revamp `TaskGraph` API @NiklasRosenstein 0.4.0 (2022-07-24) Type Description PR Issues Author Feature allow adding question marks to target selectors to make it optional @NiklasRosenstein Improvement improve `ValueError` raised when task selector is resolved in `Task.get_relationships()` to add the context of the task that the selector is resolved from @NiklasRosenstein Breaking change rename `TaskResult` to `TaskStatusType` @NiklasRosenstein Breaking change add `TaskStatus` type @NiklasRosenstein Breaking change replace `Task.is_up_to_date()` and `Task.is_skippable()` with new `Task.prepare()` method @NiklasRosenstein Breaking change `Task.execute()` can now return `None` to indicate success @NiklasRosenstein Breaking change The `TaskGraph` now tracks task statuses and can be used to query remaining tasks (added `TaskGraph.set_status()`, `TaskGraph.get_status()`, `TaskGraph.is_complete()` and `TaskGraph.ready()` @NiklasRosenstein Feature The `Executor` now by default executes as many tasks as possible instead of failing on the first (this is enabled by the new `TaskGraph` API) 1 @NiklasRosenstein Improvement add `TaskStatusType.PENDING` @NiklasRosenstein 0.3.7 (2022-07-23) Type Description PR Issues Author Breaking change rename `TaskRelationship.before` to `.inverse` @NiklasRosenstein Feature add `Task.add_relationship()` method @NiklasRosenstein 0.3.6 (2022-07-20) Type Description PR Issues Author Feature The `Property` type can now be used with (a union of) any type(s) as long as it is a proper `type` subclass and can be used for type checking @NiklasRosenstein 0.3.5 (2022-07-20) Type Description PR Issues Author Feature add `kraken.core.utils.is_relative_to()` function @NiklasRosenstein 0.3.4 (2022-07-19) Type Description PR Issues Author Breaking change Build script can only be called `.kraken.py`, all other alternative names are no longer supported @NiklasRosenstein 0.3.3 (2022-07-19) Type Description PR Issues Author Feature add `Project.do(group)` parameter and `TaskResult.from_exit_code()` method @NiklasRosenstein 0.3.2 (2022-07-19) Type Description PR Issues Author Feature add `Property.config()` static method that allows setting default values for the property on the class level @NiklasRosenstein 0.3.1 (2022-07-19) Type Description PR Issues Author Improvement add `Property.output()` static method, removed `kraken.core.testing.kraken_execute()` @NiklasRosenstein 0.3.0 (2022-07-19) Type Description PR Issues Author Breaking change a rather substantial refactor to rename `BuildContext` to just `Context` and `BuildGraph` to `TaskGraph`, removed the `task_factory` class and moved its functionality mostly to `Project.do()` @NiklasRosenstein Breaking change move `kraken.testing` to `kraken.core.testing` @NiklasRosenstein Feature add simple CLI that can be run with `python -m kraken.core` @NiklasRosenstein Improvement flush after printing in Executor to ensure that outputs are in order (sometimes an issue in CI jobs on Github and Gitlab) @NiklasRosenstein 0.2.19 (2022-07-18) Type Description PR Issues Author Fix fix `NameError` in `BuildContext.execute()` that is unfortunately not caught my Mypy or Flake8 @NiklasRosenstein 0.2.18 (2022-07-18) Type Description PR Issues Author Feature add `kraken.core.executor` module, moved here from `kraken-cli`; add `BuildContext.get_build_graph()` and `BuildContext.execute()` @NiklasRosenstein 0.2.17 (2022-07-15) Type Description PR Issues Author Improvement `Task.execute()` default implementation now raises a `NotImplementedError` @NiklasRosenstein Breaking change remove installation of project requirements via Pip and enabling it with localimport; kraken-cli will manage a build environment instead @NiklasRosenstein 0.2.16 (2022-07-13) Type Description PR Issues Author Improvement `Project.do()` no longer overrides `Task.default` and `Task.capture` by default if no explicit value is specified @NiklasRosenstein Feature add `GroupTask` class and `Project.group()` @NiklasRosenstein 0.2.15 (2022-07-13) Type Description PR Issues Author Feature add `BuildGraph.__len__()` @NiklasRosenstein 0.2.14 (2022-07-13) Type Description PR Issues Author Breaking change update `BuildContext.current()` to behave the same as `Project.current()` @NiklasRosenstein 0.2.13 (2022-07-13) Type Description PR Issues Author Feature add `BuildContext.current()` and `Project.current()` static methods @NiklasRosenstein 0.2.12 (2022-07-13) Type Description PR Issues Author Feature add `BuildContext.metadata` @NiklasRosenstein 0.2.11 (2022-07-10) Type Description PR Issues Author Fix Fix multiple inheritance alongside `kraken.core.property.Object` @NiklasRosenstein 0.2.10 (2022-07-09) Type Description PR Issues Author Breaking change no longer accept `kraken.py` in the Project directory as a build script, but instead additionally accept `.kraken.py` and `.kraken.build.py` @NiklasRosenstein 0.2.9 (2022-07-09) Type Description PR Issues Author Improvement update `Task.logger` name @NiklasRosenstein Feature add `atomic_file_swap(create_dirs)` parameter @NiklasRosenstein Improvement improve `kraken.testing` module @NiklasRosenstein 0.2.7 (2022-07-08) Type Description PR Issues Author Fix implement `kraken.testing` module properly as a Pytest plugin, add a `kraken_execute()` function for executing a build graph from tests @NiklasRosenstein Improvement use `Task.logger` to report properties that cannot be set by `Object.update()`, this most commonly surfaces when using a `task_factory` in a build script and passing parameters that do not exist on the task @NiklasRosenstein Feature add `import_class()` to `kraken.core.utils` @NiklasRosenstein 0.2.6 (2022-07-08) Type Description PR Issues Author Feature add `Property.seterror()` @NiklasRosenstein 0.2.5 (2022-07-08) Type Description PR Issues Author Improvement Look for `kraken.build.py` scripts in addition to `kraken.py`, the latter can result into issues resolving the `kraken` package as the build script can take precedence @NiklasRosenstein Feature add `Project.metadata` and `Project.find_metadata()` which can be used by plugins to store project-global data @NiklasRosenstein Improvement improve VSCode type recognition for `Task.project` by putting `typing.ForwardRef()` for `Project` in the else block of `if TYPE_CHECKING:` @NiklasRosenstein Feature add `kraken.core.utils.atomic_file_swap()` @NiklasRosenstein 0.2.4 (2022-07-08) Type Description PR Issues Author Feature add `BuildGraph.tasks(required_only)` parameter @NiklasRosenstein Breaking change rename `BuildScriptLoader` to `ProjectLoader` @NiklasRosenstein Feature Support `collections.abc.Callable` as a valid property type @NiklasRosenstein Feature Add `Task.logger` @NiklasRosenstein Breaking change `Task.is_skippable()` and `Task.is_up_to_date()` now raise `NotImplementedError by default which is part of the API now @NiklasRosenstein 0.2.3 (2022-07-06) Type Description PR Issues Author Fix fix self-referencing relationship introduced by properties derived from another property on the same task @NiklasRosenstein 0.2.2 (2022-07-06) Type Description PR Issues Author Fix fix typing of Supplier derived_from args @NiklasRosenstein 0.2.1 (2022-07-06) Type Description PR Issues Author Feature install requirements.txt into .build/.lib directory if a .kraken/requirements.txt file exists @NiklasRosenstein Feature implement Path value adapters @NiklasRosenstein Improvement add derived_from to of_callable(), setdefault() no longer returns a value @NiklasRosenstein 0.2.0 (2022-07-06) Type Description PR Issues Author Feature introduce Property concept and make Action and Task a subclass for HasProperties, Task.action is a property and Action.task was added which is also a property @NiklasRosenstein Breaking change redesign API, remove Action @NiklasRosenstein 0.1.3 (2022-07-04) Type Description PR Issues Author Feature Add `Project.resolve_tasks()` @NiklasRosenstein 0.1.2 (2022-07-04) Type Description PR Issues Author Improvement add `Project.to_path()` @NiklasRosenstein 0.1.0.post1 (2022-07-01) Type Description PR Issues Author Fix reduce networkx requirement for Python 3.7 compatibility, fix lints @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#092-2022-08-22","text":"Type Description PR Issues Author Fix fix argument types for `render_file()` (now accepting suppliers instead of properties) @NiklasRosenstein","title":"0.9.2 (2022-08-22)"},{"location":"changelog/#091-2022-08-17","text":"Type Description PR Issues Author Fix pin networkx down to 2.6.x which is the last version with Py 3.7 compatibility @NiklasRosenstein Feature add `RequirementSpec.replace()` @NiklasRosenstein","title":"0.9.1 (2022-08-17)"},{"location":"changelog/#090-2022-08-17","text":"Type Description PR Issues Author Fix fix error when running `krakenw q` because we do not configure the `q` command with these options (close #5) @NiklasRosenstein Breaking change remove vendored libraries again, consolidate packages under `kraken.core` @NiklasRosenstein","title":"0.9.0 (2022-08-17)"},{"location":"changelog/#0811-2022-08-13","text":"Type Description PR Issues Author Fix Fix resuming from a build state when it contains objects from a module in the `# :: pythonpath` specified in the build script, and fix resuming from multiple build states. @NiklasRosenstein","title":"0.8.11 (2022-08-13)"},{"location":"changelog/#0810-2022-08-12","text":"Type Description PR Issues Author Breaking change remove unused `kraken.core.__main__` @NiklasRosenstein Fix fix `NameError` in `kraken query describe` @NiklasRosenstein","title":"0.8.10 (2022-08-12)"},{"location":"changelog/#089-2022-08-12","text":"Type Description PR Issues Author Improvement include message in successful CheckFileContentsTask execution @NiklasRosenstein","title":"0.8.9 (2022-08-12)"},{"location":"changelog/#088-2022-08-12","text":"Type Description PR Issues Author Fix fix missing import of VizOptions for `kraken q viz` command, fix CheckFileContentsTask @NiklasRosenstein","title":"0.8.8 (2022-08-12)"},{"location":"changelog/#087-2022-08-12","text":"Type Description PR Issues Author Improvement update RenderFileTask and add CheckFileContentsTsak @NiklasRosenstein","title":"0.8.7 (2022-08-12)"},{"location":"changelog/#086-2022-08-12","text":"Type Description PR Issues Author Feature add `kraken.util.krakenw` module @NiklasRosenstein","title":"0.8.6 (2022-08-12)"},{"location":"changelog/#085-2022-08-12","text":"Type Description PR Issues Author Fix another fix for `kraken.test` ~.~ @NiklasRosenstein","title":"0.8.5 (2022-08-12)"},{"location":"changelog/#084-2022-08-12","text":"Type Description PR Issues Author Fix fix kraken_project() again @NiklasRosenstein","title":"0.8.4 (2022-08-12)"},{"location":"changelog/#083-2022-08-12","text":"Type Description PR Issues Author Fix fix `kraken.test` @NiklasRosenstein","title":"0.8.3 (2022-08-12)"},{"location":"changelog/#082-2022-08-12","text":"Type Description PR Issues Author Fix No longer vendor `dill` package, if we try to use the vendored version we get weird pickle issues @NiklasRosenstein","title":"0.8.2 (2022-08-12)"},{"location":"changelog/#080-2022-08-12","text":"Type Description PR Issues Author Breaking change large refactor of the `kraken-core` module, now comes with the cli and utils and a task library, remove `kraken.api` and vendor most dependencies @NiklasRosenstein","title":"0.8.0 (2022-08-12)"},{"location":"changelog/#075-2022-08-06","text":"Type Description PR Issues Author Improvement Fix a potential error when a bad value is passed to `Property.default()` on construction of the object where it cannot be properly formatted as a string yet because some attributes may not be set; `Property.__repr__()` now catches an exception of formatting it's owner @NiklasRosenstein Fix In the previous version, the default groups `lint` and `test` should have been marked as default tasks. They are now @NiklasRosenstein Improvement `TaskGraph.set_targets()` now longer treats group tasks special; this allows `TaskGroup.tasks(targets_only=True)` to return the group tasks that were originally passed into `set_targets()` @NiklasRosenstein","title":"0.7.5 (2022-08-06)"},{"location":"changelog/#074-2022-08-06","text":"Type Description PR Issues Author Improvement Add `Project.group(default)` parameter and mark the groups `lint` and `test` as default. @NiklasRosenstein Breaking change `Task.default` is now disabled by default @NiklasRosenstein Feature Add `Task.get_description()` @NiklasRosenstein","title":"0.7.4 (2022-08-06)"},{"location":"changelog/#073-2022-08-05","text":"Type Description PR Issues Author Feature add `TaskGraph.tasks(pending)` parameter @NiklasRosenstein Fix `TaskGraph.set_status()` now correctly resets the required background tasks of all _pending_ tasks, not just the immediate build targets @NiklasRosenstein","title":"0.7.3 (2022-08-05)"},{"location":"changelog/#072-2022-08-05","text":"Type Description PR Issues Author Deprecation Deprecate `Task.capture` and `Project.do(capture)` with warnings @NiklasRosenstein Fix The task graph now keeps track of tasks that return `TaskStatusType.STARTED` and will reset their status when the graph targets are set (`TaskGraph.set_target()`) which is usually after the TaskGraph was deserialized. This will ensure that background tasks are run again if another task that has not yet run is executed in a resumed execution. @NiklasRosenstein","title":"0.7.2 (2022-08-05)"},{"location":"changelog/#071-2022-08-04","text":"Type Description PR Issues Author Fix Fix default executor to now print build summary in execution order 4 @NiklasRosenstein","title":"0.7.1 (2022-08-04)"},{"location":"changelog/#070-2022-08-03","text":"Type Description PR Issues Author Feature add `TaskStatusType.INTERRUPTED`, the default executor now stops execution immediately (but it would not understand waiting for any currently running tasks if the TaskRunner is executing them in the background) @NiklasRosenstein","title":"0.7.0 (2022-08-03)"},{"location":"changelog/#062-2022-08-01","text":"Type Description PR Issues Author Improvement Depending on a group now behaves like directly dependending on the groups members; this change is particularly relevant for the successors that background tasks are active for. @NiklasRosenstein","title":"0.6.2 (2022-08-01)"},{"location":"changelog/#061-2022-08-01","text":"Type Description PR Issues Author Feature add `Property.setmap()` @NiklasRosenstein","title":"0.6.1 (2022-08-01)"},{"location":"changelog/#060-2022-07-29","text":"Type Description PR Issues Author Feature Define new interfaces for `Graph`, `GraphExecutor` and `GraphExecutorObserver` and provide default implementations that do not use termcolor, so we can get rid of that dependency in `kraken-core` 3 @NiklasRosenstein","title":"0.6.0 (2022-07-29)"},{"location":"changelog/#054-2022-07-27","text":"Type Description PR Issues Author Fix make `Supplier.map()` result picklable @NiklasRosenstein","title":"0.5.4 (2022-07-27)"},{"location":"changelog/#053-2022-07-27","text":"Type Description PR Issues Author Improvement Move `.find_metadata()` and `.current()` implementation on `Context` and `Project` into common base classes (`MetadataContainer` and `CurrentProvider`), add `Project.default()` and `Project.default_factory()`, add `Property.setcallable()` and `Property.clear()` @NiklasRosenstein Feature Add `Task.teardown()` method and adapt `Executor` to call it @NiklasRosenstein Feature `VoidTask` can now be configured to not skip execution @NiklasRosenstein Feature Add `TaskStatusType.STARTED` @NiklasRosenstein Feature add `BackgroundTask` base class @NiklasRosenstein","title":"0.5.3 (2022-07-27)"},{"location":"changelog/#052-2022-07-24","text":"Type Description PR Issues Author Fix Fix derivation of inactive tasks in `TaskGraph` @NiklasRosenstein","title":"0.5.2 (2022-07-24)"},{"location":"changelog/#051-2022-07-24","text":"Type Description PR Issues Author Fix Python 3.7 and 3.8 compatibility (removed use of | operator for types) @NiklasRosenstein","title":"0.5.1 (2022-07-24)"},{"location":"changelog/#050-2022-07-24","text":"Type Description PR Issues Author Improvement make sure anonymous `Supplier` subclasses are picklable @NiklasRosenstein Breaking change revamp `TaskGraph` API @NiklasRosenstein","title":"0.5.0 (2022-07-24)"},{"location":"changelog/#040-2022-07-24","text":"Type Description PR Issues Author Feature allow adding question marks to target selectors to make it optional @NiklasRosenstein Improvement improve `ValueError` raised when task selector is resolved in `Task.get_relationships()` to add the context of the task that the selector is resolved from @NiklasRosenstein Breaking change rename `TaskResult` to `TaskStatusType` @NiklasRosenstein Breaking change add `TaskStatus` type @NiklasRosenstein Breaking change replace `Task.is_up_to_date()` and `Task.is_skippable()` with new `Task.prepare()` method @NiklasRosenstein Breaking change `Task.execute()` can now return `None` to indicate success @NiklasRosenstein Breaking change The `TaskGraph` now tracks task statuses and can be used to query remaining tasks (added `TaskGraph.set_status()`, `TaskGraph.get_status()`, `TaskGraph.is_complete()` and `TaskGraph.ready()` @NiklasRosenstein Feature The `Executor` now by default executes as many tasks as possible instead of failing on the first (this is enabled by the new `TaskGraph` API) 1 @NiklasRosenstein Improvement add `TaskStatusType.PENDING` @NiklasRosenstein","title":"0.4.0 (2022-07-24)"},{"location":"changelog/#037-2022-07-23","text":"Type Description PR Issues Author Breaking change rename `TaskRelationship.before` to `.inverse` @NiklasRosenstein Feature add `Task.add_relationship()` method @NiklasRosenstein","title":"0.3.7 (2022-07-23)"},{"location":"changelog/#036-2022-07-20","text":"Type Description PR Issues Author Feature The `Property` type can now be used with (a union of) any type(s) as long as it is a proper `type` subclass and can be used for type checking @NiklasRosenstein","title":"0.3.6 (2022-07-20)"},{"location":"changelog/#035-2022-07-20","text":"Type Description PR Issues Author Feature add `kraken.core.utils.is_relative_to()` function @NiklasRosenstein","title":"0.3.5 (2022-07-20)"},{"location":"changelog/#034-2022-07-19","text":"Type Description PR Issues Author Breaking change Build script can only be called `.kraken.py`, all other alternative names are no longer supported @NiklasRosenstein","title":"0.3.4 (2022-07-19)"},{"location":"changelog/#033-2022-07-19","text":"Type Description PR Issues Author Feature add `Project.do(group)` parameter and `TaskResult.from_exit_code()` method @NiklasRosenstein","title":"0.3.3 (2022-07-19)"},{"location":"changelog/#032-2022-07-19","text":"Type Description PR Issues Author Feature add `Property.config()` static method that allows setting default values for the property on the class level @NiklasRosenstein","title":"0.3.2 (2022-07-19)"},{"location":"changelog/#031-2022-07-19","text":"Type Description PR Issues Author Improvement add `Property.output()` static method, removed `kraken.core.testing.kraken_execute()` @NiklasRosenstein","title":"0.3.1 (2022-07-19)"},{"location":"changelog/#030-2022-07-19","text":"Type Description PR Issues Author Breaking change a rather substantial refactor to rename `BuildContext` to just `Context` and `BuildGraph` to `TaskGraph`, removed the `task_factory` class and moved its functionality mostly to `Project.do()` @NiklasRosenstein Breaking change move `kraken.testing` to `kraken.core.testing` @NiklasRosenstein Feature add simple CLI that can be run with `python -m kraken.core` @NiklasRosenstein Improvement flush after printing in Executor to ensure that outputs are in order (sometimes an issue in CI jobs on Github and Gitlab) @NiklasRosenstein","title":"0.3.0 (2022-07-19)"},{"location":"changelog/#0219-2022-07-18","text":"Type Description PR Issues Author Fix fix `NameError` in `BuildContext.execute()` that is unfortunately not caught my Mypy or Flake8 @NiklasRosenstein","title":"0.2.19 (2022-07-18)"},{"location":"changelog/#0218-2022-07-18","text":"Type Description PR Issues Author Feature add `kraken.core.executor` module, moved here from `kraken-cli`; add `BuildContext.get_build_graph()` and `BuildContext.execute()` @NiklasRosenstein","title":"0.2.18 (2022-07-18)"},{"location":"changelog/#0217-2022-07-15","text":"Type Description PR Issues Author Improvement `Task.execute()` default implementation now raises a `NotImplementedError` @NiklasRosenstein Breaking change remove installation of project requirements via Pip and enabling it with localimport; kraken-cli will manage a build environment instead @NiklasRosenstein","title":"0.2.17 (2022-07-15)"},{"location":"changelog/#0216-2022-07-13","text":"Type Description PR Issues Author Improvement `Project.do()` no longer overrides `Task.default` and `Task.capture` by default if no explicit value is specified @NiklasRosenstein Feature add `GroupTask` class and `Project.group()` @NiklasRosenstein","title":"0.2.16 (2022-07-13)"},{"location":"changelog/#0215-2022-07-13","text":"Type Description PR Issues Author Feature add `BuildGraph.__len__()` @NiklasRosenstein","title":"0.2.15 (2022-07-13)"},{"location":"changelog/#0214-2022-07-13","text":"Type Description PR Issues Author Breaking change update `BuildContext.current()` to behave the same as `Project.current()` @NiklasRosenstein","title":"0.2.14 (2022-07-13)"},{"location":"changelog/#0213-2022-07-13","text":"Type Description PR Issues Author Feature add `BuildContext.current()` and `Project.current()` static methods @NiklasRosenstein","title":"0.2.13 (2022-07-13)"},{"location":"changelog/#0212-2022-07-13","text":"Type Description PR Issues Author Feature add `BuildContext.metadata` @NiklasRosenstein","title":"0.2.12 (2022-07-13)"},{"location":"changelog/#0211-2022-07-10","text":"Type Description PR Issues Author Fix Fix multiple inheritance alongside `kraken.core.property.Object` @NiklasRosenstein","title":"0.2.11 (2022-07-10)"},{"location":"changelog/#0210-2022-07-09","text":"Type Description PR Issues Author Breaking change no longer accept `kraken.py` in the Project directory as a build script, but instead additionally accept `.kraken.py` and `.kraken.build.py` @NiklasRosenstein","title":"0.2.10 (2022-07-09)"},{"location":"changelog/#029-2022-07-09","text":"Type Description PR Issues Author Improvement update `Task.logger` name @NiklasRosenstein Feature add `atomic_file_swap(create_dirs)` parameter @NiklasRosenstein Improvement improve `kraken.testing` module @NiklasRosenstein","title":"0.2.9 (2022-07-09)"},{"location":"changelog/#027-2022-07-08","text":"Type Description PR Issues Author Fix implement `kraken.testing` module properly as a Pytest plugin, add a `kraken_execute()` function for executing a build graph from tests @NiklasRosenstein Improvement use `Task.logger` to report properties that cannot be set by `Object.update()`, this most commonly surfaces when using a `task_factory` in a build script and passing parameters that do not exist on the task @NiklasRosenstein Feature add `import_class()` to `kraken.core.utils` @NiklasRosenstein","title":"0.2.7 (2022-07-08)"},{"location":"changelog/#026-2022-07-08","text":"Type Description PR Issues Author Feature add `Property.seterror()` @NiklasRosenstein","title":"0.2.6 (2022-07-08)"},{"location":"changelog/#025-2022-07-08","text":"Type Description PR Issues Author Improvement Look for `kraken.build.py` scripts in addition to `kraken.py`, the latter can result into issues resolving the `kraken` package as the build script can take precedence @NiklasRosenstein Feature add `Project.metadata` and `Project.find_metadata()` which can be used by plugins to store project-global data @NiklasRosenstein Improvement improve VSCode type recognition for `Task.project` by putting `typing.ForwardRef()` for `Project` in the else block of `if TYPE_CHECKING:` @NiklasRosenstein Feature add `kraken.core.utils.atomic_file_swap()` @NiklasRosenstein","title":"0.2.5 (2022-07-08)"},{"location":"changelog/#024-2022-07-08","text":"Type Description PR Issues Author Feature add `BuildGraph.tasks(required_only)` parameter @NiklasRosenstein Breaking change rename `BuildScriptLoader` to `ProjectLoader` @NiklasRosenstein Feature Support `collections.abc.Callable` as a valid property type @NiklasRosenstein Feature Add `Task.logger` @NiklasRosenstein Breaking change `Task.is_skippable()` and `Task.is_up_to_date()` now raise `NotImplementedError by default which is part of the API now @NiklasRosenstein","title":"0.2.4 (2022-07-08)"},{"location":"changelog/#023-2022-07-06","text":"Type Description PR Issues Author Fix fix self-referencing relationship introduced by properties derived from another property on the same task @NiklasRosenstein","title":"0.2.3 (2022-07-06)"},{"location":"changelog/#022-2022-07-06","text":"Type Description PR Issues Author Fix fix typing of Supplier derived_from args @NiklasRosenstein","title":"0.2.2 (2022-07-06)"},{"location":"changelog/#021-2022-07-06","text":"Type Description PR Issues Author Feature install requirements.txt into .build/.lib directory if a .kraken/requirements.txt file exists @NiklasRosenstein Feature implement Path value adapters @NiklasRosenstein Improvement add derived_from to of_callable(), setdefault() no longer returns a value @NiklasRosenstein","title":"0.2.1 (2022-07-06)"},{"location":"changelog/#020-2022-07-06","text":"Type Description PR Issues Author Feature introduce Property concept and make Action and Task a subclass for HasProperties, Task.action is a property and Action.task was added which is also a property @NiklasRosenstein Breaking change redesign API, remove Action @NiklasRosenstein","title":"0.2.0 (2022-07-06)"},{"location":"changelog/#013-2022-07-04","text":"Type Description PR Issues Author Feature Add `Project.resolve_tasks()` @NiklasRosenstein","title":"0.1.3 (2022-07-04)"},{"location":"changelog/#012-2022-07-04","text":"Type Description PR Issues Author Improvement add `Project.to_path()` @NiklasRosenstein","title":"0.1.2 (2022-07-04)"},{"location":"changelog/#010post1-2022-07-01","text":"Type Description PR Issues Author Fix reduce networkx requirement for Python 3.7 compatibility, fix lints @NiklasRosenstein","title":"0.1.0.post1 (2022-07-01)"},{"location":"synopsis/","text":"Synopsis kraken $ kraken --help usage: kraken [-h] {run,r,query,q} ... The Kraken build system. Kraken focuses on ease of use and simplicity to model complex task orchestration workflows. positional arguments: {run,r,query,q} options: -h, --help show this help message and exit","title":"Synopsis"},{"location":"synopsis/#synopsis","text":"","title":"Synopsis"},{"location":"synopsis/#kraken","text":"$ kraken --help usage: kraken [-h] {run,r,query,q} ... The Kraken build system. Kraken focuses on ease of use and simplicity to model complex task orchestration workflows. positional arguments: {run,r,query,q} options: -h, --help show this help message and exit","title":"kraken"},{"location":"synopsis/run/","text":"kraken run $ kraken run --help usage: kraken run [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [-s] [-0] [-x TASK] [-X TASK] [task ...] positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state -s, --skip-build just load the project, do not build -0, --allow-no-tasks don't error if no tasks got selected -x TASK, --exclude TASK exclude one or more tasks -X TASK, --exclude-subgraph TASK exclude the entire subgraphs of one or more tasks","title":"kraken run"},{"location":"synopsis/run/#kraken-run","text":"$ kraken run --help usage: kraken run [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [-s] [-0] [-x TASK] [-X TASK] [task ...] positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state -s, --skip-build just load the project, do not build -0, --allow-no-tasks don't error if no tasks got selected -x TASK, --exclude TASK exclude one or more tasks -X TASK, --exclude-subgraph TASK exclude the entire subgraphs of one or more tasks","title":"kraken run"},{"location":"synopsis/query/","text":"kraken query $ kraken query --help usage: kraken query [-h] {ls,describe,d,visualize,viz,v,env} ... positional arguments: {ls,describe,d,visualize,viz,v,env} options: -h, --help show this help message and exit","title":"kraken query"},{"location":"synopsis/query/#kraken-query","text":"$ kraken query --help usage: kraken query [-h] {ls,describe,d,visualize,viz,v,env} ... positional arguments: {ls,describe,d,visualize,viz,v,env} options: -h, --help show this help message and exit","title":"kraken query"},{"location":"synopsis/query/describe/","text":"kraken query describe $ kraken query describe --help usage: kraken query describe [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [task ...] describe one or more tasks in detail positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state","title":"kraken query describe"},{"location":"synopsis/query/describe/#kraken-query-describe","text":"$ kraken query describe --help usage: kraken query describe [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [task ...] describe one or more tasks in detail positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state","title":"kraken query describe"},{"location":"synopsis/query/env/","text":"kraken query env $ kraken query env --help usage: kraken query env [-h] [-v] [-q] produce a JSON file of the Python environment distributions options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times)","title":"kraken query env"},{"location":"synopsis/query/env/#kraken-query-env","text":"$ kraken query env --help usage: kraken query env [-h] [-v] [-q] produce a JSON file of the Python environment distributions options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times)","title":"kraken query env"},{"location":"synopsis/query/ls/","text":"kraken query ls $ kraken query ls --help usage: kraken query ls [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [task ...] list all tasks and task groups in the build positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state","title":"kraken query ls"},{"location":"synopsis/query/ls/#kraken-query-ls","text":"$ kraken query ls --help usage: kraken query ls [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [task ...] list all tasks and task groups in the build positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state","title":"kraken query ls"},{"location":"synopsis/query/visualize/","text":"kraken query visualize $ kraken query visualize --help usage: kraken query visualize [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [-a] [-s] [task ...] generate a GraphViz of the build positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state -a, --all include all tasks in the graph -s, --show show the graph in the browser (requires dot)","title":"kraken query visualize"},{"location":"synopsis/query/visualize/#kraken-query-visualize","text":"$ kraken query visualize --help usage: kraken query visualize [-h] [-v] [-q] [-b PATH] [-p PATH] [--resume] [--restart {all}] [--no-save] [-a] [-s] [task ...] generate a GraphViz of the build positional arguments: task one or more tasks to execute options: -h, --help show this help message and exit -v increase the log level (can be specified multiple times) -q decrease the log level (can be specified multiple times) -b PATH, --build-dir PATH the build directory to write to [default: build] -p PATH, --project-dir PATH the root project directory [default: ./] --resume load previous build state --restart {all} load previous build state, but discard existing results (requires --resume) --no-save do not save the new build state -a, --all include all tasks in the graph -s, --show show the graph in the browser (requires dot)","title":"kraken query visualize"}]}